// Automatically generated by MockGen. DO NOT EDIT!
// Source: eventsgateway/grpc/generated/events.pb.go

package mock_eventsgateway

import (
	gomock "github.com/golang/mock/gomock"
	pb "github.com/topfreegames/protos/eventsgateway/grpc/generated"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Mock of GRPCForwarderClient interface
type MockGRPCForwarderClient struct {
	ctrl     *gomock.Controller
	recorder *_MockGRPCForwarderClientRecorder
}

// Recorder for MockGRPCForwarderClient (not exported)
type _MockGRPCForwarderClientRecorder struct {
	mock *MockGRPCForwarderClient
}

func NewMockGRPCForwarderClient(ctrl *gomock.Controller) *MockGRPCForwarderClient {
	mock := &MockGRPCForwarderClient{ctrl: ctrl}
	mock.recorder = &_MockGRPCForwarderClientRecorder{mock}
	return mock
}

func (_m *MockGRPCForwarderClient) EXPECT() *_MockGRPCForwarderClientRecorder {
	return _m.recorder
}

func (_m *MockGRPCForwarderClient) SendEvent(ctx context.Context, in *pb.Event, opts ...grpc.CallOption) (*pb.Response, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "SendEvent", _s...)
	ret0, _ := ret[0].(*pb.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockGRPCForwarderClientRecorder) SendEvent(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SendEvent", _s...)
}

// Mock of GRPCForwarderServer interface
type MockGRPCForwarderServer struct {
	ctrl     *gomock.Controller
	recorder *_MockGRPCForwarderServerRecorder
}

// Recorder for MockGRPCForwarderServer (not exported)
type _MockGRPCForwarderServerRecorder struct {
	mock *MockGRPCForwarderServer
}

func NewMockGRPCForwarderServer(ctrl *gomock.Controller) *MockGRPCForwarderServer {
	mock := &MockGRPCForwarderServer{ctrl: ctrl}
	mock.recorder = &_MockGRPCForwarderServerRecorder{mock}
	return mock
}

func (_m *MockGRPCForwarderServer) EXPECT() *_MockGRPCForwarderServerRecorder {
	return _m.recorder
}

func (_m *MockGRPCForwarderServer) SendEvent(_param0 context.Context, _param1 *pb.Event) (*pb.Response, error) {
	ret := _m.ctrl.Call(_m, "SendEvent", _param0, _param1)
	ret0, _ := ret[0].(*pb.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockGRPCForwarderServerRecorder) SendEvent(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SendEvent", arg0, arg1)
}
